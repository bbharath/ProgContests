//SRM 610 Div 1 250
//Passed System Tests
public class TheMatrix
{
	public int MaxArea(String[] _board)
	{
		int N = _board.length;
		int M = _board[0].length();
		char[][] board = new char[N][M];
		for(int i=0;i<N;++i) {
			board[i] = _board[i].toCharArray();
		}
		
		//for any r is (c1,c2) a valid
		boolean[][][] isValid = new boolean[M][M][N];
		for(int r=0;r<N;++r) {
			for(int c=0;c<M;++c) {
				int maxValidC = c;
				char prev = board[r][c];
				int idx = c;
				while(idx+1<M && board[r][idx+1]!=prev) {
					prev = board[r][idx+1];
					++maxValidC;
					++idx;
				}
				for(int i=c;i<=maxValidC;++i) {
					isValid[c][i][r] = true;
				}
				for(int i=maxValidC+1;i<M;++i) {
					isValid[c][i][r] = false;
				}
			}
		}
		
		//r compatible with r+1 given range (c1, c2)
		boolean[][][] isCompatible = new boolean[M][M][N];
		for(int r=0;r+1<N;++r) {
			for(int c=0;c<M;++c) {
				boolean base = board[r][c] != board[r+1][c];
				if(base) {
					char prev1 = board[r][c];
					char prev2 = board[r+1][c];
					int idx = c;
					int maxValidC = c;
					while(idx+1<M && board[r][idx+1]!=prev1 && board[r+1][idx+1]!=prev2) {
						prev1 = board[r][idx+1];
						prev2 = board[r+1][idx+1];
						++maxValidC;
						++idx;
					}
					for(int i=c;i<=maxValidC;++i) {
						isCompatible[c][i][r] = true;
					}
					for(int i=maxValidC+1;i<M;++i) {
						isCompatible[c][i][r] = false;
					}
					
				} else {
					for(int i=c;i<M;++i) {
						isCompatible[c][i][r] = false;
					}
				}
			}
		}
		for(int c1=0;c1<M;++c1) {
			for(int c2=c1;c2<M;++c2) {
				isCompatible[c1][c2][N-1] = false;
			}
		}
		
		int ret = 1 ;
		for(int c1=0;c1<M;++c1) {
			for(int c2=c1;c2<M;++c2) {
				int W = c2-c1 + 1;
				int firstValidR = -1;
				for(int r=0;r<N;++r) {
					if(isValid[c1][c2][r]) {
						ret = Math.max(ret, W);
						firstValidR = r;
						break;						
					}
				}
				if(firstValidR>=0) {
					int idx = firstValidR, curBlockSize = 1;
					while(idx<N) {
						if(isCompatible[c1][c2][idx]) {
							++idx;
							++curBlockSize;
						} else {
							ret = Math.max(ret, curBlockSize * W);
							curBlockSize = 1;
							++idx;
						}
					}
				}
			}
		}
		
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		TheMatrix obj;
		int answer;
		obj = new TheMatrix();
		long startTime = System.currentTimeMillis();
		answer = obj.MaxArea(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new String[]{"1","0"};
		p1 = 2;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"0000"};
		p1 = 1;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"01"};
		p1 = 2;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"001","000","100"};
		p1 = 2;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"0"};
		p1 = 1;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new String[]{"101","010"};
		p1 = 6;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = new String[]{"101","011","101","010"};
		p1 = 8;
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 7 -----
		p0 = new String[]{
				
				"1100011100","00111101110001001100101001110100110010100110110000","00010011011000101000100001101110111100100000010100","01101110001101000001001000001011101010011101011110","00000100110011001011101011110011011101100001110111","00110011110000011001011100001110101010100110010110","00111001010011011111010100000100100000101101110001","10101101101110111110000011111011001011100011110001","00101110010101111000001010110100001110111011100011","01111110010100111010110001111000111101110100111011"};
		p1 = 12;
		all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
