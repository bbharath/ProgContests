import java.util.Arrays;

//SRM 625 Div 1 250
//Passed System Tests
public class PalindromePermutations
{
	private double getFactorial(int inp) {
		double ret = 1.0;
		for(int i=1;i<=inp;++i)
			ret*=i;
		return ret;
	}
	private double getNumKinds(int total, int[] kinds) {
		double num = getFactorial(total);
		double denom = 1.0;
		for(int kind : kinds) {
			denom*=getFactorial(kind);
		}
		double ret = num/denom;
		return ret;
	}
	public double palindromeProbability(String word)
	{
		int[] cc = new int[26];
		Arrays.fill(cc,0);
		for(int i=0;i<word.length();++i) {
			int ch = word.charAt(i)-'a';
			++cc[ch];			
		}
		int odd = 0;
		for(int i=0; i<26;++i) {			
			if(cc[i]%2==1)
				++odd;
		}
		if(odd>1)
			return 0.0;
		
		double denom = getNumKinds(word.length(), cc);
		
		for(int i=0;i<26;++i)
			cc[i]/=2;
		int s =0 ;
		for(int i=0;i<26;++i)
			s+=cc[i];
		
		double num = getNumKinds(s, cc);
		
		double ret = num/denom;
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, double p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		PalindromePermutations obj;
		double answer;
		obj = new PalindromePermutations();
		long startTime = System.currentTimeMillis();
		answer = obj.palindromeProbability(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = Math.abs(p1 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p1));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		double p1;
		
		// ----- test 0 -----
		p0 = "haha";
		p1 = 0.3333333333333333D;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "xxxxy";
		p1 = 0.2D;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "xxxx";
		p1 = 1.0D;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "abcde";
		p1 = 0.0D;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhff";
		p1 = 0.025641025641025637D;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
