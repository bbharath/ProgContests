import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Stack;
//Passed System Tests
//SRM 669 Div 1 250

public class SubdividedSlimes
{
	public int findScore(List<Integer> a)
	{
		Stack<Integer> s = new Stack<Integer>();
		Collections.sort(a);
		for (int x :  a) {
			s.push(x);
		}
		int ret = 0;
		while(s.size()>1) {
			int x = s.pop();
			int y = s.pop();
			ret += (x*y);
			s.push(x+y);
		}
		return ret;
	}
	public int needCut(int S, int M)
	{
		int ret = -1;
		for (int K=1;K<=1001;++K) {
			int numPieces = K+1;
			List<Integer> cur = new ArrayList<Integer>();
			int rem = S;
			for(int denom=numPieces;denom>1;--denom) {
				int x = rem/denom;
				if (x>0) {
					rem-=x;
					cur.add(x);
				}
			}
			cur.add(rem);
			if(cur.size()>1) {
				int score = findScore(cur);
				if(score>=M) {
					ret = K;
					break;
				}
			}
		}
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		SubdividedSlimes obj;
		int answer;
		obj = new SubdividedSlimes();
		long startTime = System.currentTimeMillis();
		answer = obj.needCut(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = 3;
		p1 = 2;
		p2 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = 3;
		p2 = 2;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 3;
		p1 = 4;
		p2 = -1;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 765;
		p1 = 271828;
		p2 = 14;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		p0 = 1000;
		p1 = 333333;
		p2 = 2;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		

		p0 = 5;
		p1 = 8;
		p2 = 2;
		all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;

		p0 = 116;
		p1 = 6618;
		p2 = 63;
		all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;

		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
