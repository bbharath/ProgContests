import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class Fraction implements Comparator<Fraction>, Comparable<Fraction> {

	long num;
	long denom;
	List<Integer> cLows;
	List<Integer> bHighs;
	int low;
	int high;
	public Fraction(long num, long denom) {
		this.num = num;
		this.denom = denom;
		this.low = -1;
		this.high = -1;
	}
	public boolean equals(Fraction B) {
		return (num==B.num && denom==B.denom );
	}
	public int compare(Fraction A, Fraction B) {
		long lhs = A.num * B.denom;
		long rhs = A.denom * B.num;
		long diff = lhs - rhs;
		int ret = (diff==0) ? 0 : (diff>0) ? +1 : -1;
		return ret;
	}
	@Override
	public int compareTo(Fraction B) {
		return compare(this, B);
	} 
	public String toString() {
		return num+ " "+denom;
	}
	@Override
	public int hashCode() {
		return toString().hashCode();
	}
}

public class BearDarts {

	private int searchLessThanOrEqual(List<Integer> list, int value) {
		int size = list.size();		
		if (list.get(0) <= value && value <= list.get(size-1)) {
			int low = 0;
			int high = size;
			int mid = -1;
			if(size == 1 ) {
				if (list.get(0) == value) 
					return 0;
				return -1;
			}
//			else if (size == 2) {
//				if(list.get(1) == value) 
//					return 1; 
//				if(list.get(0) == value)
//					return 0;
//				return -1;
//			} 
			else {			
				for(int iter=1;iter<=64;++iter) {
					mid = (low + high)/2;
					boolean success = (list.get(mid).compareTo(value)>0); 
					if (success) {
						high = mid;
					} else {
						low = mid;
					}			
				}
				return mid;
			}
		} else {
			return -1;
		}
	}
	
	private int gcd(int a, int b) {		
		while (a>0 && b>0) {
			if (a>=b) {
				int t1 = b;
				int t2 = a%b;
				a = t1;
				b = t2;
			} else {
				int t=a;
				a=b;
				b=t;
			}
		}
		if (a==0) {
			return b;
		} else {
			return a;
		}		
	}
	public long count(int[] w)
	{
		int N = w.length;
		
		int[][] gcd = new int[N][N];
		
		for(int i=0;i<N;++i) {
			for(int j=i+1;j<N;++j) {
				int G = gcd(w[i], w[j]);
				gcd[i][j] = G;
				gcd[j][i] = G;
			}
		}
		
		List<Fraction> abPossibles = new ArrayList<Fraction>();

		for(int i=0;i<N;++i) {
			for(int j=i+1;j<N;++j) {
				Fraction ab = new Fraction(w[i]/gcd[i][j], w[j]/gcd[i][j]);
				abPossibles.add(ab);
				ab.low = i;
				ab.high = j;
			}
		}

		Collections.sort(abPossibles);
		
		int SZ = abPossibles.size();
		int goodPrevIndex = 0;
		for(int i=1;i<SZ;++i) {
			Fraction f1 = abPossibles.get(goodPrevIndex);
			Fraction f2 = abPossibles.get(i);
			if (f1.equals(f2)) {
				if (f1.bHighs == null) {
					f1.bHighs = new ArrayList<Integer>();
					f1.bHighs.add(f1.high);
				}
				f1.bHighs.add(f2.high);
				abPossibles.set(i, null);
			} else {
				goodPrevIndex = i;
				if (f1.bHighs == null) {
					f1.bHighs = new ArrayList<Integer>();
					f1.bHighs.add(f1.high);
				}
			}
		}
		
		List<Fraction> abPossiblesSorted = new ArrayList<Fraction>();
		for(int i=0;i<SZ;++i) {
			Fraction cur =abPossibles.get(i); 
			if( cur!=null) {
				abPossiblesSorted.add(cur);
			}
		}
		
		for(int i=0;i<N;++i) {
			for(int j=i+1;j<N;++j) {
				Fraction dc = new Fraction(w[j]/gcd[i][j], w[i]/gcd[i][j]);
				int idx = Collections.binarySearch(abPossiblesSorted, dc);
				if (idx>=0) {
					Fraction cur = abPossiblesSorted.get(idx);
					if (cur.cLows == null) {
						cur.cLows = new ArrayList<Integer>();
					}
					cur.cLows.add(i);
				}
			}
		}
				
		long ret = 0L;
		SZ = abPossiblesSorted.size();
		for(int i=0;i<SZ;++i) {
			Fraction cur = abPossiblesSorted.get(i);
			if (cur.bHighs !=null && cur.cLows!=null) {
				int LOWSZ = cur.cLows.size();
				for(int H : cur.bHighs) {					
					if (cur.cLows.get(0)>H) {
						ret += LOWSZ;
					} else {
						int idx = searchLessThanOrEqual(cur.cLows, H);
						if (idx>=0) {						
							//System.out.println(Arrays.toString(cur.cLows.toArray())+ " "+H+ " "+idx);
							if (cur.cLows.get(idx)<=H) {
								++idx;
							}
							ret += (LOWSZ - idx);
						}
					}					
				}
			}
		}
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		BearDarts obj;
		long answer;
		obj = new BearDarts();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		long p1;
		
		// ----- test 0 -----
		p0 = new int[]{6,8,4,3,6};
		p1 = 2L;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{3,4,12,1};
		p1 = 0L;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{42,1000000,1000000,42,1000000,1000000};
		p1 = 3L;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,1,1,1,1};
		p1 = 5L;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{1,2,3,4,5,6,5,4,3,2,1};
		p1 = 22L;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{33554432,33554432,67108864,134217728};
		p1 = 0L;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		p0 = new int[]{2, 2, 1, 2, 2, 1, 1, 1, 1, 1};
		p1 = 86;
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		
		p0 = new int[] {33554432, 33554432, 134217728, 33554432, 67108864, 67108864, 67108864, 33554432};
		p1 = 19;
		all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
		
		p0 = new int[] {4, 816293376, 5038848, 40310784, 1944, 1119744, 9, 2, 6, 1259712, 1, 1, 2, 612220032, 3888, 209952, 648, 612220032, 31104, 216, 816293376, 216, 7776, 432, 648, 157464, 559872, 408146688, 272097792, 648, 972, 31104, 18, 12, 1, 288, 18, 972, 12, 816293376, 967458816, 816293376, 248832, 124416, 248832, 725594112, 72, 967458816, 181398528, 859963392, 108, 859963392, 864, 3, 9, 1, 7558272, 967458816, 12, 216, 72, 816293376, 644972544, 2, 1889568, 272097792, 1, 54, 725594112, 816293376, 3, 4, 1679616, 483729408, 216, 9, 3981312, 3888, 2, 644972544, 3, 816293376, 544195584, 3359232, 46656, 544195584, 24, 36, 864, 192, 544195584, 1728, 216, 22674816, 648, 18, 162, 544195584, 324, 2239488, 3, 6, 24, 432, 279936, 10368, 108, 81, 20155392, 7558272, 918330048, 11664, 177147, 688747536, 725594112, 18, 36, 24, 6, 4478976, 725594112, 3456, 644972544, 7776, 362797056, 419904, 2916, 972, 725594112, 362797056, 918330048, 544195584, 2, 1, 272097792, 72, 10077696, 1, 17496, 408146688, 432, 18, 725594112, 816293376, 3888, 72, 1889568, 486, 36, 9, 18, 136048896, 216, 1, 288, 4, 5832, 18, 1152, 362797056, 24, 4, 432, 3888, 5184, 1728, 24, 8, 1296, 4478976, 3, 62208, 419904, 544195584, 31104, 18, 644972544, 144, 429981696, 725594112, 2, 408146688, 6, 1, 24, 432, 181398528, 725594112, 46656, 544195584, 62208, 108, 725594112, 5184, 96, 144, 209952, 864, 24, 1944, 4251528, 612220032, 314928, 1, 972, 20736, 612220032, 483729408, 544195584, 30233088, 725594112, 8, 648, 864, 644972544, 60466176, 15116544, 1296, 3, 314928, 11337408, 362797056, 483729408, 816293376, 1, 1296, 11664, 20155392, 324, 162, 24, 144, 2, 3, 725594112, 362797056, 16, 7776, 186624, 6912, 2916, 612220032, 544195584, 725594112, 1, 362797056, 6912, 248832, 13824, 36, 1, 53747712, 256, 816293376, 432, 36, 161243136, 2916, 6, 6, 24, 2, 36, 12, 6, 36, 1944, 967458816, 859963392, 644972544, 12, 725594112, 25509168, 816293376, 1119744, 80621568, 6718464, 432, 8, 104976, 9, 725594112, 9, 725594112, 12, 544195584, 1, 108, 2519424, 36, 1, 1, 725594112, 725594112, 816293376, 972, 1, 2592, 9, 1, 144, 967458816, 859963392, 816293376, 725594112, 967458816, 24, 24, 24, 22674816, 864, 1, 6, 816293376, 1, 46656, 419904, 248832, 362797056, 864, 1, 12, 209952, 544195584, 1, 31104, 967458816, 15116544, 483729408, 419904, 6912, 216, 1679616, 612220032, 2, 8, 967458816, 544195584, 648, 408146688, 2, 54, 209952, 186624, 967458816, 120932352, 216, 20736, 967458816, 9, 559872, 162, 248832, 1, 18, 17496, 27, 432, 324, 573308928, 3456, 72, 3, 725594112, 864, 1259712, 3888, 972, 279936, 82944, 576, 725594112, 46656, 6718464, 54, 104976, 324, 967458816, 5038848, 288, 2, 1889568, 839808, 2519424, 373248, 108, 18, 362797056, 15552, 544195584, 432, 32, 816293376, 967458816, 60466176, 161243136, 241864704, 248832, 20736, 52488, 8957952, 72, 486, 13436928, 576, 12, 2592, 46656, 216, 1296, 26873856, 45349632, 6912, 2, 68024448, 3, 24, 1944, 3888, 45349632, 272097792, 34992, 272097792, 1, 967458816, 186624, 69984, 1492992, 8748, 362797056, 23328, 62208, 362797056, 967458816, 288, 8, 1, 3, 544195584, 18, 144, 68024448, 1889568, 544195584, 23328, 54, 559872, 108, 279936, 6, 1296, 1259712, 46656, 18, 644972544, 432, 1, 5832, 864, 15552, 816293376, 362797056, 483729408, 10077696, 45349632, 288, 2, 816293376, 12, 544195584, 864, 69984, 108, 816293376, 23328, 362797056, 6, 216, 322486272, 69984, 612220032, 1, 746496, 6, 1, 3, 3779136, 612220032, 72, 10368, 725594112, 9, 9, 8748, 1, 816293376, 7776, 644972544, 725594112, 72, 124416, 816293376, 3, 1, 839808, 12, 36, 644972544, 816293376, 3, 6, 4, 48, 816293376, 362797056, 81, 209952, 725594112, 18, 12, 216, 288, 644972544, 362797056, 162, 9, 15116544, 72, 648, 1, 483729408, 1, 108, 972, 544195584, 8957952, 544195584, 459165024, 725594112, 3, 3, 24, 93312, 34992, 2519424, 544195584, 1, 432, 11664, 2, 2519424, 36, 3, 1, 816293376, 9, 1, 15552, 24, 4, 157464, 497664, 36, 241864704, 192, 46656, 816293376, 4, 459165024, 972, 3359232, 1, 2592, 612220032, 24, 967458816, 3456, 612220032, 816293376, 241864704, 746496, 23328, 1, 7776, 12, 725594112, 483729408, 4, 429981696, 483729408, 20736, 27, 209952, 72, 1, 644972544, 544195584, 725594112, 544195584, 139968, 162, 3456, 1, 483729408, 544195584, 816293376, 362797056, 34992, 864, 1, 7558272, 162, 2916, 1492992, 3456, 6, 1296, 36, 6, 7776, 6, 483729408, 648, 162, 1944, 362797056, 3779136, 816293376, 181398528, 216, 8, 486, 2, 864, 1, 93312, 256, 5832, 11664, 10077696, 3, 497664, 4, 967458816, 60466176, 3, 864, 384, 24, 36, 816293376, 362797056, 68024448, 5184, 30233088, 573308928, 216, 36, 6, 13436928, 2519424, 839808, 2519424, 11943936, 216, 573308928, 544195584, 6, 12, 96, 1, 81, 4, 3888, 644972544, 7776, 1152, 90699264, 54, 967458816, 644972544, 9, 816293376, 1296, 362797056, 864, 1944, 1, 576, 144, 1, 3, 23328, 1, 1944, 144, 382205952, 3888, 322486272, 30233088, 1679616, 6, 3, 559872, 967458816, 612220032, 162, 124416, 576, 2239488, 544195584, 644972544, 725594112, 15552, 23328, 31104, 544195584, 725594112, 36, 181398528, 725594112, 2239488, 15552, 16, 725594112, 6, 573308928, 18, 12, 6718464, 816293376, 6, 544195584, 53747712, 354294, 3, 1296, 1296, 5668704, 644972544, 9, 839808, 6, 18, 2, 18, 36, 725594112, 15116544, 204073344, 725594112, 1728, 12, 241864704, 32, 725594112, 18, 324, 2, 60466176, 11664, 20155392, 3, 408146688, 8748, 644972544, 41472, 362797056, 10368, 6, 18, 486, 24, 612220032, 8748, 408146688, 1, 2592, 4, 3, 362797056, 48, 124416, 1119744, 72, 967458816, 6, 816293376, 725594112, 544195584, 967458816, 26244, 644972544, 362797056, 729, 816293376, 5038848, 1679616, 972, 816293376, 725594112, 10368, 918330048, 644972544, 62208, 18, 186624, 918330048, 15552, 72, 157464, 2239488, 612220032, 27, 60466176, 2239488, 459165024, 1327104, 6912, 6912, 559872, 24, 648, 544195584, 7776, 3, 1, 544195584, 612220032, 4, 1, 48, 408146688, 1, 27, 6, 3888, 41472, 1, 24, 241864704, 2, 1458, 15116544, 644972544, 725594112, 3888, 432, 9, 1119744, 6, 9, 3, 16, 93312, 967458816, 5308416, 1152, 2, 1, 362797056, 6, 72, 6, 6718464, 34992, 918330048, 144, 544195584, 408146688, 1, 1152, 139968, 279936, 3, 108, 644972544, 432, 24, 967458816, 432, 1, 544195584, 1944, 3888, 80621568, 432, 2, 1119744, 216, 612220032, 18, 36, 3, 382205952, 612220032, 3, 1, 432, 72, 544195584, 8748, 3, 725594112, 1, 10368, 24, 3, 4, 3, 7776, 324, 459165024, 62208, 69984, 24, 209952, 816293376, 1296, 41472, 324, 967458816, 918330048, 216, 48, 859963392, 41472, 1, 279936, 816293376, 18, 972, 11664, 544195584, 1417176, 544195584, 648, 144, 967458816, 324, 216, 23328, 1152, 816293376, 2, 216, 419904, 3, 6, 1, 5832, 96, 1679616, 3, 3, 972, 46656, 419904, 243, 3779136, 544195584, 124416, 72, 6, 573308928, 972, 1728, 31104, 90699264, 3, 6, 36, 15552, 90699264, 1119744, 8957952, 4478976, 816293376, 362797056, 972, 2834352, 2, 384, 108, 2985984, 4478976, 362797056, 3, 544195584, 18, 816293376, 9, 8, 483729408, 544195584, 573308928, 629856, 1, 3, 12};
		p1 = 141705426;
		all_right = KawigiEdit_RunTest(8, p0, true, p1) && all_right;

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
