//Passed System Tests
//SRM 629 Div 1 250
/*
 * Did a mistake during the contest. Did not take into account that, even if
 * the corners were outside, the boundaries could/would still overlap.
 * Changing <= to < and vice-versa in a  few places was enough to pass.
 */

public class RectangleCovering
{
	public int minimumNumber(int _holeH, int _holeW, int[] boardH, int[] boardW)
	{
		long H = _holeH;
		long W = _holeW;
		
		int N=boardH.length;

		
		int r1 = Integer.MAX_VALUE, r2=Integer.MAX_VALUE;
		//cover along H
		long covered  = 0L;
		int count = 0 ;
		boolean[] taken = new boolean[N];
		while(covered < H) {
			long max = -1;
			int maxIdx=-1;
			for(int i=0;i<N;++i) {
				if(!taken[i]) {
					long h = boardH[i];
					long w = boardW[i];
					if(w>W) {
						if(h>max) {
							max=h;
							maxIdx=i;
						}
					}
					if(h>W) {
						if(w>max) {
							max = w;
							maxIdx=i;
						}
					}
				}
			}
			if(maxIdx<0)
				break;
			taken[maxIdx]=true;
			covered+=max;
			++count;
		}
		if(covered>=H) {
			r1 = count;
		}
		//cover along W
		covered  = 0L;
		count = 0 ;
		taken = new boolean[N];
		while(covered < W) {
			long max = -1;
			int maxIdx=-1;
			for(int i=0;i<N;++i) {
				if(!taken[i]) {
					long h = boardH[i];
					long w = boardW[i];
					if(w>H) {
						if(h>max) {
							max=h;
							maxIdx=i;
						}
					}
					if(h>H) {
						if(w>max) {
							max = w;
							maxIdx=i;
						}
					}
				}
			}
			if(maxIdx<0)
				break;
			taken[maxIdx]=true;
			covered+=max;
			++count;
		}
		if(covered>=W) {
			r2 = count;
		}
		
		int ret = Math.min(r1, r2);		
		if(ret == Integer.MAX_VALUE)
			ret = -1;
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int[] p2, int[] p3, boolean hasAnswer, int p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p3.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p3[i]);
		}
		System.out.print("}");
		System.out.println("]");
		RectangleCovering obj;
		int answer;
		obj = new RectangleCovering();
		long startTime = System.currentTimeMillis();
		answer = obj.minimumNumber(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p4);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p4;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int[] p2;
		int[] p3;
		int p4;
		
		// ----- test 0 -----
		p0 = 5;
		p1 = 5;
		p2 = new int[]{8,8,8};
		p3 = new int[]{2,3,4};
		p4 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 10;
		p1 = 10;
		p2 = new int[]{6,6,6,6};
		p3 = new int[]{6,6,6,6};
		p4 = -1;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 5;
		p1 = 5;
		p2 = new int[]{5};
		p3 = new int[]{5};
		p4 = -1;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 3;
		p1 = 5;
		p2 = new int[]{6};
		p3 = new int[]{4};
		p4 = 1;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 10000;
		p1 = 5000;
		p2 = new int[]{12345,12343,12323,12424,1515,6666,6789,1424,11111,25};
		p3 = new int[]{1442,2448,42,1818,3535,3333,3456,7890,1,52};
		p4 = 3;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		p0 = 2;
		p1 = 2;
		p2 = new int[] {3};
		p3 = new int[] {2};
		p4 = 1;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
		
		p0 = 1000000000;
		p1 = 1000000000;
		p2 = new int[] {1000000000, 1000000000, 1000000000, 1000000000};
		p3 = new int[] {1000000000, 1000000000, 1000000000, 1000000000};
		p4 = -1;
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
