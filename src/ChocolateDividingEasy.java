//Passed System Tests
//SRM 636 Div 1 250
public class ChocolateDividingEasy
{
	public int findBest(String[] choc)
	{
		int R = choc.length;
		int C = choc[0].length();
		
		int[][] orig = new int[R][C];
		for(int i=0;i<R;++i) {
			for(int j=0;j<C;++j) {
				orig[i][j] = choc[i].charAt(j)-'0';
			}
		}
		
		int[][] rowSums = new int[R][C];
		for(int i=0;i<R;++i) {
			rowSums[i][0] = orig[i][0];
			for(int j=1;j<C;++j) {
				int v = orig[i][j];
				rowSums[i][j] = rowSums[i][j-1] + v;
			}
		}
		
		int[][][][] sums = new int[R][R][C][C];
		for(int cs = 0; cs<C; ++cs ) {
			for(int ce=cs; ce<C; ++ce) {
				for(int rs=0; rs<R; ++rs) {
					int sum = rowSums[rs][ce] - rowSums[rs][cs] + orig[rs][cs];
					sums[rs][rs][cs][ce] = sum;
					for(int re=rs+1;re<R;++re) {
						int s = rowSums[re][ce] - rowSums[re][cs] + orig[re][cs];
						sum+=s;
						sums[rs][re][cs][ce] = sum;
					}
				}
			}
		}
		
		
		int ret = 0;
		for(int r1 = 0; r1 <=R-3; ++r1) {
			for(int r2 = r1+1 ; r2 <=R-2; ++r2) {
				for(int c1 =0 ; c1<=C-3 ;++c1 ) {
					for(int c2 =c1+1; c2<=C-2; ++c2) {
						
						//(0, r1) (r1+1, r2) (r2+1, R-1)
						//(0, c1) (c1+1, c2) (c2+1, C-1)
						
						int V = Integer.MAX_VALUE;
						V = Math.min(V,sums[0][r1][0][c1] );
						V = Math.min(V,sums[0][r1][c1+1][c2] );
						V = Math.min(V,sums[0][r1][c2+1][C-1] );
						V = Math.min(V,sums[r1+1][r2][0][c1] );
						V = Math.min(V,sums[r1+1][r2][c1+1][c2] );
						V = Math.min(V,sums[r1+1][r2][c2+1][C-1] );
						V = Math.min(V,sums[r2+1][R-1][0][c1] );
						V = Math.min(V,sums[r2+1][R-1][c1+1][c2] );
						V = Math.min(V,sums[r2+1][R-1][c2+1][C-1] );
						
						ret = Math.max(ret, V);
					}
				}
			}
		
		}
		
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		ChocolateDividingEasy obj;
		int answer;
		obj = new ChocolateDividingEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.findBest(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new String[]{"9768","6767","5313"};
		p1 = 3;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"36753562","91270936","06261879","20237592","28973612","93194784"};
		p1 = 15;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"012","345","678"};
		p1 = 0;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
