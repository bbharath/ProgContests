import java.util.ArrayList;
import java.util.Collections;

//SRM 603 Div 1 500
//Passed System Tests
/**
 * Needed a lot of help to solve this. But I figured out some of it on my own.
 * @author Bharath Balakrishnan
 *
 */
public class PairsOfStrings
{
	private int[] getAllDivisors(int N) {
		ArrayList<Integer> divs = new ArrayList<Integer>();
		for(int i=1;(i*i)<=N;++i) {
			int d1 = i;
			if(N%i==0) {
				int d2 = N/i;
				if(d1 == d2) 
					divs.add(d1);
				else {
					divs.add(d1);
					divs.add(d2);					
				}					
			}
		}
		Collections.sort(divs);
		int[] out = new int[divs.size()];
		for(int i=0;i<divs.size();++i)
			out[i] = divs.get(i);
		return out;
	}
	public long modPow(long x, long y, long mod) {
		x%=mod;
		long log2 = 1;
		int pow2 = 0;
		while(log2<=y) {
			log2*=2;
			++pow2;			
		}
		long[] modPows = new long[pow2];
		modPows[0] = x;
		for(int i=1;i<pow2;++i) {
			modPows[i] = modPows[i-1] * modPows[i-1];
			modPows[i] %= mod;
		}
		
		String binaryStr = Long.toString(y, 2);
		
		long ans = 1L;
		
		for(int i=binaryStr.length()-1,j=0;i>=0;i--, j++) {
			int ch = binaryStr.charAt(i)-'0';
			if(ch==1) {
				ans *=modPows[j];
				ans%=mod;
			}
		}
		ans%=mod;
		return ans;
	}

	
	public int getNumber(int N, int K)
	{
		final int MOD = 1000000007;
		int[] divisors = getAllDivisors(N);
		
		long[] possi = new long[divisors.length];
			
		for(int i=0;i<divisors.length;++i) {
			long di = divisors[i];
			
			long kd = modPow(K, di, MOD);
			
			for(int j=0;j<i;++j) {
				if(divisors[i] % divisors[j] == 0) {
					kd -= possi[j];
					if(kd<0) {
						kd+=MOD;
					}
				}
			}
			possi[i] = kd;
		}
		
		long ans = 0L;
		for(int i=0;i<divisors.length;++i) {
			ans += (divisors[i] * possi[i]);
			ans %=MOD;
		}
		return (int) ans;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		PairsOfStrings obj;
		int answer;
		obj = new PairsOfStrings();
		long startTime = System.currentTimeMillis();
		answer = obj.getNumber(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = 2;
		p1 = 2;
		p2 = 6;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = 2;
		p2 = 20;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 3;
		p1 = 4;
		p2 = 184;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 6;
		p1 = 2;
		p2 = 348;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 100;
		p1 = 26;
		p2 = 46519912;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
