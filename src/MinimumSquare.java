import java.util.ArrayList;
import java.util.Collections;

/*
 * I was not able to solve this. Had to consult the forums for an answer. 
 * Nice technique though.
 */
//Passed System Tests
//SRM 614 Div 1 250
public class MinimumSquare
{

	public long minArea(int[] x, int[] y, int K)
	{
		long ret = Long.MAX_VALUE;
		
		int N = x.length;
		ArrayList<Integer> possi = new ArrayList<Integer>();
		for(int X : x) {
			for(int Y : y) {
				possi.clear();
				for(int i=0;i<N;++i) {
					if(x[i]>=X && y[i]>=Y) {
						int dx = x[i]-X;
						int dy = y[i]-Y;
						int side = Math.max(dx,dy);
						possi.add(side);
					}
				}
				
				if(possi.size()>=K) {
					Collections.sort(possi);
					int side = possi.get(K-1);
					side+=2;
					ret = Math.min(ret, (long)side*(long)side);
				}
				
			}
		}
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, long p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + p2);
		System.out.println("]");
		MinimumSquare obj;
		long answer;
		obj = new MinimumSquare();
		long startTime = System.currentTimeMillis();
		answer = obj.minArea(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int p2;
		long p3;
		
		// ----- test 0 -----
		p0 = new int[]{0,3};
		p1 = new int[]{0,7};
		p2 = 2;
		p3 = 81L;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{-4,3,1};
		p1 = new int[]{3,-1,-2};
		p2 = 2;
		p3 = 16L;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{0,0,1,1,2,2};
		p1 = new int[]{0,1,0,1,0,1};
		p2 = 4;
		p3 = 9L;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1000000000,1000000000,1000000000,-1000000000,-1000000000,-1000000000};
		p1 = new int[]{1000000000,0,-1000000000,1000000000,0,-1000000000};
		p2 = 3;
		p3 = 4000000008000000004L;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{-47881,28623,1769,-38328,-16737,16653,-23181,37360,41429,26282,254,728,8299,-41080,-29498,17488,-23937,-11,33319,25232};
		p1 = new int[]{-46462,48985,-43820,-19587,-33593,-28337,13667,-48131,-5568,-2332,-41918,-31370,-3695,42599,-37788,-40096,39049,25045,-2122,3874};
		p2 = 8;
		p3 = 1695545329L;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		p0 = new int[] {-20, -232, 307, -199, 311, 317, 48, 127, 140, -229, 81, 173, 219, -246, -311, 109, 97, -315, -24, -329, -328, -35, 88, -187, 305, 108, -49, 28, -190, 40, 203, -58, -125, 176, 90, -264, 215};
		p1 = new int[] {-6, -95, 95, -56, 256, 195, 40, -46, -179, 278, -240, -54, 298, -90, -214, -187, -62, 127, -285, -258, -277, -170, 9, -84, 277, 279, 24, -104, -91, 181, 169, -128, 35, 263, 73, 262, 180};
		p2 = 37;
		p3 = 419904;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		
		p0 = new int[]{2586, -3715, 1830, -1422, 1745, 4194, -5522, -2346, -67, -2696, -5866, -383, -4509, 5610, 1294, 43, -5599, -1657, 1136, 6018, 1841, 2384, 2336, 1163, 5186, -2198, 4780, -2881};
		p1 = new int[]{-2893, -2761, -6147, 5412, -3664, -3383, 5264, 3626, 2315, 5478, 1918, -4748, -2150, 4323, -2038, -1351, 1939, 2906, -2809, 5613, 4575, 2701, -1050, 3747, 6149, 2946, -2040, -5017};
		p2 = 22;
		p3 = 104611984;		
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
