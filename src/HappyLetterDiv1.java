//SRM 627 Div 1 250
//Passed System Tests
public class HappyLetterDiv1
{
	private int getNonZero(int[] cnt) {
		int ret=0;
		for(int i=0;i<cnt.length;++i) {
			if(cnt[i]>0)
				++ret;
		}
		return ret;
	}
	public boolean isPossible(int[] count, int chosen) {
		int N = count.length;
		boolean ret = false;
		while(true) {
			int nz = getNonZero(count);
			if (nz ==0 || nz == 1) {
				if(nz==1)
					ret=true;
				break;
			}
			else if(nz==2) {
				int c1 = count[chosen];
				int c2 = -1;
				for(int i=0;i<N;++i) {
					if(i!=chosen && count[i]>0) {
						c2=count[i];
						break;
					}
				}
				if(c1>c2) {
					ret = true;
					break;
				} else {
					ret = false;
					break;
				}
			}
			else {
				int m1 = -1, m2 = -1, m1Idx = -1, m2Idx=-1;
				for(int i=0;i<N;++i) {
					if(i!=chosen) {
						if(count[i]>m1) {
							m1 = count[i];
							m1Idx = i;
						}						
					}
				}
				for(int i=0; i<N;++i) {
					if(i!=chosen && i!=m1Idx) {
						if(count[i]>m2) {
							m2 =count[i];
							m2Idx = i;
						}						
					}
				}
				count[m1Idx]--;
				count[m2Idx]--;
			}
		}
		
		return ret;
	}
	public String getHappyLetters(String letters)
	{
		String ret = "";
		int[] counts = new int[26];
		
		for(int i=0;i<letters.length();++i) {
			char ch = letters.charAt(i);
			++counts[ch-'a'];
		}
		
		for(int i=0; i<26; ++i) {
			char cur= (char) ('a'+i);
			if(counts[i] == 0)
				continue;
			boolean possi = isPossible(counts.clone(), i);
			if(possi)
				ret+=Character.toString(cur);
		}		
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		HappyLetterDiv1 obj;
		String answer;
		obj = new HappyLetterDiv1();
		long startTime = System.currentTimeMillis();
		answer = obj.getHappyLetters(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		String p1;
		
		// ----- test 0 -----
		p0 = "aabbacccc";
		p1 = "abc";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "aaaaaaaccdd";
		p1 = "a";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "ddabccadb";
		p1 = "abcd";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "aaabbb";
		p1 = "";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "rdokcogscosn";
		p1 = "cos";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		p0 = "ocoooccscloolllll";
		p1="clos";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
