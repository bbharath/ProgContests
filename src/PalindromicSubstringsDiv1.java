import java.util.Arrays;

//Passed System Tests (But only just :-))
//SRM 607 Div 1 250

public class PalindromicSubstringsDiv1
{
	private double getProb(char c1, char c2) {
		if(c1!='?' && c2!='?') {
			if(c1==c2)
				return 1.0;
			else
				return 0.0;
		} else {
			return 1.0/26.0; 
		}
	}
	public double expectedPalindromes(String[] S1, String[] S2)
	{
		String S="";
		for(int i=0;i<S1.length;++i) 
			S+=S1[i];
		for(int i=0;i<S2.length;++i)
			S+=S2[i];
		
		double ret = 0.0;
		
		int N = S.length();
		
		double[][] memo = new double[N+1][N+1];
		for(int i=0;i<memo.length;++i)
			Arrays.fill(memo[i],-1.0);
		
		for(int length=1;length<=N;++length) {
			for(int start=0;start+length-1<N;++start) {

				int end = start+length-1;
				int lim = length/2;
				if(length%2==0)
					--lim;
				
				double p = -1.0;
				if(start+1<memo.length && end-1>=0 && memo[start+1][end-1]!=-1.0) {
					p = getProb(S.charAt(start), S.charAt(end)) * memo[start+1][end-1];
				} else {				
					p = 1.0;
					for(int i=0;i<=lim;++i) {
						int left = start+i;
						int right = end - i;
						if(left == right) {
							continue;
						} else {
							char c1 = S.charAt(left);
							char c2 = S.charAt(right);
							if(c1!='?' && c2!='?' && c1!=c2)
							{
								p=0.0;
								break;
							}
							double p2 = getProb(c1, c2);						
							p*=p2;						
						}
					}
				}
				memo[start][end] = p;
				ret += p;
				
			}
		}
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, String[] p1, boolean hasAnswer, double p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p1[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		PalindromicSubstringsDiv1 obj;
		double answer;
		obj = new PalindromicSubstringsDiv1();
		long startTime = System.currentTimeMillis();
		answer = obj.expectedPalindromes(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = Math.abs(p2 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p2));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		String[] p1;
		double p2;
		
		// ----- test 0 -----
		p0 = new String[]{"a","a",""};
		p1 = new String[]{"a"};
		p2 = 6.0D;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"z??"};
		p1 = new String[]{};
		p2 = 3.115384615384615D;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"ab","c"};
		p1 = new String[]{"??","a?"};
		p2 = 7.315088757396449D;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{};
		p1 = new String[]{"?"};
		p2 = 1.0D;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"ab?def","?"};
		p1 = new String[]{"f??a"};
		p2 = 12.545971779699588D;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		String p = "";
		for(int i=0;i<=50;++i)
			p+="?";
		p0 = new String[50];
		p1 = new String[50];
		for(int i=0;i<50;++i)
		{
			p0[i] = p;
			p1[i] = p;
					
		}
		p2 = 5507.873599999642D;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
