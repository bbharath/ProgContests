//Passed System Tests
//SRM 627 Div 1 500
/*
 * This was the first Div 1 500 problem I solved on my own. I did not consult the editorial, did not look
 * at other solutions. :-)
 * It needed a backtrack algorithm with a RangeCount tree. And using adjacency lists instead of raw arrays was enough
 * to pass.
 * I will solve other problems inspired by this, but this problem will always be special. 
 * Hopefully, this will be the first of many. It only motivates me to work harder.
 * 
 */
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
class CountTree2 {
	
	int[] counts;
	int N;
	public CountTree2(int inp) {
		int p = 1;
		while (p<=inp) {
			p*=2;
		}
		this.N=p;
		this.counts = new int[2*p+1];
		Arrays.fill(counts, 0);
	}
	private void go(int index, boolean inc, int val, int low, int high) {
		if(index>=counts.length)
			return;
		
		//System.err.println("Changing index at index: "+index+" "+low+" "+high);
		if(inc) 
			++counts[index];
		else 
			--counts[index];
		
		int mid = (low+high)/2;
		if(0<=val && val<=mid) {
			go(2*index+1, inc, val, low, mid);
		} else {
			go(2*index+2, inc, val, mid+1, high);
		}
	}
	public void insert(int X) {
		go(0, true, X, 0, N-1);		
	}
	public void delete(int X) {
		go(0, false, X, 0, N-1);
	}
	private int getCount(int index, int L, int H, int lower, int upper) {
		if(L==lower && H==upper)
			return counts[index];
		else {
			int mid = (L+H)/2;
			int ret = 0;
			if(upper<=mid) {
				ret = getCount(index*2+1, L, mid, lower, upper);
			}
			else if(lower>mid) {
				ret = getCount(index*2+2, mid+1, H, lower, upper);
			} else {
				ret += getCount(index*2+1, L, mid, lower, mid);
				ret += getCount(index*2+2, mid+1, H, mid+1, upper);
			}			
			return ret;
		}
	}
		
	public int getCount(int X) {		
		return getCount(0, 0, N-1, 0, X);
	}
	public int getCount(int low, int high) {
		return getCount(0,0, N-1, low, high);
	}
}


public class GraphInversions
{
	private int K;
	private int N;
	private int[] V;
	private boolean[][] graph;
	private boolean[] visited;
	private int ret = Integer.MAX_VALUE;
	public CountTree2 ct;
	private List<ArrayList<Integer>> adjList;
	private void go(int idx,int pathLength, int numInv) {
		visited[idx]=true;
		
		if(pathLength>=K) {
			ret = Math.min(ret, numInv);
			return;
		}
		
		for(int vertex : adjList.get(idx)) {
			if(!visited[vertex] && graph[idx][vertex]) {
				int v = V[vertex];
				
				visited[vertex]=true;
				ct.insert(v);
				
				int cnt = ct.getCount(v-1);
								
				go(vertex, pathLength+1, cnt+numInv);
				
				visited[vertex]=false;
				ct.delete(v);			
			}
		}
		
	}
	
	public int getMinimumInversions(int[] A, int[] B, int[] V, int K)
	{
		this.N= V.length;
		this.visited = new boolean[N];
		this.V=V;
		this.K = K;
		this.graph = new boolean[N][N];
		
		System.err.println(N);
		this.ct = new CountTree2(1000);
		
		this.adjList = new ArrayList<ArrayList<Integer>>();
		
		for(int i=0;i<N;++i)
			adjList.add(new ArrayList<Integer>());
		
		for(int i=0;i<N;++i) {
			graph[A[i]][B[i]]=true;
			graph[B[i]][A[i]]=true;
			adjList.get(A[i]).add(B[i]);
			adjList.get(B[i]).add(A[i]);			
		}
		
		for(int i=0;i<N;++i) {					
			visited[i]=true;
			ct.insert(V[i]);
			
			go(i,1,0);
			
			visited[i]=false;
			ct.delete(V[i]);
		}
		if(ret == Integer.MAX_VALUE)
			ret = -1;
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int[] p2, int p3, boolean hasAnswer, int p4) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}" + "," + p3);
		System.out.println("]");
		GraphInversions obj;
		int answer;
		obj = new GraphInversions();
		long startTime = System.currentTimeMillis();
		answer = obj.getMinimumInversions(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p4);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p4;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int[] p2;
		int p3;
		int p4;
		
		// ----- test 0 -----
		p0 = new int[]{0,1,2};
		p1 = new int[]{1,2,0};
		p2 = new int[]{40,50,60};
		p3 = 3;
		p4 = 0;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{0,1,2,3};
		p1 = new int[]{1,2,3,0};
		p2 = new int[]{60,40,50,30};
		p3 = 3;
		p4 = 1;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{0,1,2,3,0};
		p1 = new int[]{1,2,3,0,4};
		p2 = new int[]{10,10,10,5,5};
		p3 = 5;
		p4 = 1;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{0,1,2,3,0,2};
		p1 = new int[]{1,2,3,0,4,5};
		p2 = new int[]{10,2,5,3,7,1};
		p3 = 6;
		p4 = -1;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{5,7,7,5,5,7,6,4};
		p1 = new int[]{2,0,2,0,1,4,7,3};
		p2 = new int[]{15,10,5,30,22,10,5,2};
		p3 = 6;
		p4 = 3;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		p0 = new int[] {549, 482, 155, 484, 247, 550, 625, 350, 445, 732, 251, 48, 88, 274, 667, 648, 729, 717, 672, 716, 42, 215, 56, 549, 18, 502, 415, 664, 454, 410, 443, 680, 248, 543, 51, 397, 168, 99, 425, 496, 262, 703, 457, 218, 645, 602, 766, 348, 392, 479, 377, 240, 205, 245, 495, 14, 449, 612, 490, 33, 476, 96, 306, 236, 214, 666, 153, 498, 322, 231, 620, 225, 576, 211, 270, 216, 120, 280, 591, 331, 506, 410, 38, 636, 301, 675, 624, 700, 752, 13, 271, 307, 66, 506, 334, 251, 30, 381, 97, 99, 695, 71, 157, 596, 461, 746, 37, 288, 621, 81, 93, 701, 667, 86, 557, 585, 58, 62, 180, 404, 145, 747, 468, 477, 762, 618, 522, 388, 318, 516, 445, 739, 331, 209, 229, 647, 97, 162, 491, 683, 704, 145, 563, 339, 758, 37, 519, 92, 465, 311, 330, 742, 340, 499, 548, 5, 476, 373, 600, 730, 131, 355, 226, 723, 530, 127, 530, 324, 490, 651, 694, 222, 204, 656, 767, 657, 114, 516, 137, 697, 275, 78, 594, 696, 731, 680, 260, 715, 228, 221, 367, 73, 138, 94, 755, 295, 304, 587, 757, 204, 144, 253, 159, 497, 263, 386, 191, 420, 428, 220, 29, 762, 529, 278, 391, 763, 626, 471, 768, 697, 222, 125, 84, 494, 546, 239, 391, 243, 305, 665, 169, 103, 96, 230, 528, 93, 44, 484, 483, 665, 756, 161, 227, 726, 728, 387, 136, 638, 296, 723, 247, 533, 560, 406, 408, 580, 76, 507, 460, 613, 709, 720, 746, 676, 632, 166, 724, 511, 186, 661, 261, 457, 719, 649, 213, 152, 562, 434, 216, 450, 590, 684, 123, 598, 670, 278, 317, 309, 379, 206, 428, 253, 22, 584, 394, 762, 326, 323, 193, 463, 268, 296, 176, 431, 639, 487, 769, 581, 8, 734, 446, 515, 757, 175, 416, 246, 531, 753, 234, 59, 217, 291, 241, 371, 17, 336, 721, 163, 304, 432, 369, 311, 689, 205, 117, 10, 230, 760, 103, 194, 57, 62, 731, 271, 147, 669, 318, 378, 105, 364, 243, 579, 237, 709, 370, 678, 569, 130, 474, 309, 749, 639, 349, 192, 500, 49, 556, 217, 722, 728, 321, 18, 523, 19, 650, 52, 132, 588, 282, 137, 492, 709, 525, 218, 575, 536, 440, 712, 341, 344, 724, 715, 572, 206, 687, 456, 739, 359, 602, 741, 7, 347, 761, 335, 556, 227, 125, 565, 528, 738, 620, 745, 293, 39, 233, 607, 92, 702, 0, 578, 578, 285, 717, 567, 53, 585, 732, 342, 201, 63, 262, 435, 500, 767, 154, 168, 399, 128, 114, 740, 8, 718, 551, 710, 255, 585, 177, 26, 566, 646, 110, 146, 617, 248, 414, 522, 295, 30, 133, 606, 432, 568, 60, 136, 156, 555, 577, 327, 265, 3, 147, 650, 194, 511, 177, 65, 718, 245, 529, 91, 277, 622, 681, 87, 279, 513, 314, 143, 550, 21, 691, 705, 300, 667, 41, 198, 212, 424, 362, 624, 456, 235, 611, 438, 551, 627, 561, 435, 618, 606, 486, 376, 383, 642, 546, 698, 573, 520, 208, 584, 107, 358, 659, 82, 344, 719, 737, 279, 414, 558, 195, 594, 641, 510, 669, 444, 688, 668, 725, 123, 455, 353, 354, 287, 673, 711, 316, 558, 460, 380, 582, 203, 297, 263, 451, 261, 535, 106, 232, 162, 276, 224, 124, 337, 472, 480, 293, 621, 619, 527, 44, 119, 360, 338, 179, 700, 219, 343, 387, 389, 417, 513, 153, 417, 634, 355, 383, 458, 571, 580, 617, 409, 185, 193, 363, 242, 348, 439, 738, 95, 610, 220, 649, 356, 537, 514, 412, 118, 133, 168, 503, 481, 23, 692, 469, 13, 559, 488, 12, 350, 765, 583, 589, 436, 629, 195, 538, 650, 134, 694, 395, 517, 361, 4, 736, 365, 371, 90, 326, 112, 357, 150, 110, 228, 274, 747, 422, 102, 16, 85, 283, 191, 661, 451, 637, 644, 559, 400, 188, 593, 620, 675, 587, 483, 36, 563, 616, 595, 747, 767, 189, 502, 701, 185, 312, 684, 45, 631, 699, 224, 741, 294, 428, 215, 288, 239, 351, 182, 135, 264, 423, 58, 411, 339, 458, 298, 289, 271, 88, 300, 178, 276, 368, 345, 518, 252, 598, 459, 622, 605, 272, 505, 115, 743, 450, 50, 305, 489, 579, 539, 415, 255, 722, 648, 247, 201, 645, 325, 764, 81, 615, 370, 623, 573, 345, 671, 635, 47, 353, 160, 100, 686, 137, 644, 20, 463, 545, 552, 390, 277, 659, 330, 629, 614, 107, 545, 710, 589, 599, 537, 390, 101, 423, 290, 508, 374, 166, 476, 245, 491, 521, 495};
		p1 = new int[] {};
		p2 = new int[] {348, 941, 387, 654, 464, 438, 607, 316, 236, 422, 205, 701, 746, 468, 11, 96, 737, 118, 420, 145, 144, 265, 366, 731, 619, 735, 247, 402, 520, 744, 936, 789, 789, 140, 881, 672, 194, 565, 665, 765, 795, 505, 352, 844, 916, 894, 857, 386, 15, 823, 531, 759, 759, 914, 72, 548, 582, 832, 750, 259, 73, 377, 551, 551, 624, 454, 571, 464, 537, 610, 614, 221, 277, 642, 851, 438, 345, 915, 693, 317, 398, 490, 490, 637, 658, 858, 694, 937, 853, 575, 575, 807, 900, 794, 178, 297, 81, 81, 875, 79, 446, 664, 434, 557, 2, 491, 228, 815, 681, 424, 888, 861, 99, 37, 164, 969, 460, 204, 224, 161, 826, 443, 600, 171, 361, 431, 248, 316, 705, 330, 338, 39, 612, 792, 451, 230, 519, 200, 200, 641, 466, 115, 115, 629, 384, 616, 985, 728, 287, 734, 584, 874, 607, 484, 753, 558, 558, 109, 109, 684, 989, 225, 717, 395, 192, 380, 465, 422, 751, 199, 160, 160, 52, 721, 100, 652, 550, 106, 94, 94, 314, 691, 691, 895, 261, 984, 455, 335, 335, 521, 310, 480, 92, 512, 512, 573, 929, 394, 667, 304, 269, 269, 518, 601, 601, 404, 577, 687, 687, 487, 488, 835, 347, 590, 235, 184, 452, 993, 287, 313, 936, 393, 869, 378, 26, 771, 414, 441, 904, 756, 954, 339, 93, 355, 892, 379, 515, 4, 243, 327, 338, 162, 116, 604, 40, 557, 53, 132, 401, 155, 711, 824, 162, 506, 779, 730, 266, 947, 393, 624, 696, 25, 653, 955, 680, 113, 302, 86, 796, 360, 188, 347, 204, 709, 134, 188, 785, 568, 49, 850, 269, 130, 265, 612, 927, 400, 134, 798, 135, 958, 225, 719, 784, 851, 394, 532, 313, 255, 771, 491, 475, 534, 276, 687, 687, 400, 400, 997, 119, 209, 435, 816, 116, 622, 123, 556, 394, 281, 604, 707, 573, 692, 152, 362, 291, 181, 69, 69, 69, 310, 310, 310, 640, 22, 802, 725, 725, 837, 594, 886, 691, 691, 906, 906, 723, 407, 407, 532, 553, 346, 275, 782, 782, 195, 934, 100, 721, 721, 300, 229, 695, 597, 232, 806, 806, 812, 817, 395, 74, 423, 684, 684, 558, 516, 849, 283, 355, 873, 728, 985, 147, 279, 416, 616, 273, 467, 271, 115, 466, 466, 318, 519, 112, 451, 612, 720, 338, 191, 191, 670, 135, 78, 431, 901, 543, 804, 935, 26, 748, 268, 266, 371, 224, 204, 282, 711, 236, 840, 217, 184, 99, 714, 932, 921, 803, 312, 666, 182, 185, 430, 491, 2, 458, 701, 945, 33, 557, 557, 254, 385, 446, 974, 831, 79, 178, 976, 889, 889, 231, 628, 620, 620, 620, 900, 807, 771, 186, 50, 50, 596, 490, 445, 915, 138, 482, 221, 614, 329, 671, 671, 610, 978, 978, 131, 551, 551, 579, 377, 73, 673, 162, 444, 541, 541, 750, 582, 796, 548, 548, 72, 763, 531, 531, 15, 386, 938, 42, 471, 471, 775, 844, 352, 864, 864, 864, 618, 839, 82, 90, 765, 765, 264, 141, 931, 107, 170, 834, 842, 793, 118, 85, 85, 971, 172, 172, 144, 71, 433, 654, 65, 65, 589, 589, 496, 619, 735, 382, 17, 17, 301, 952, 448, 947, 9, 615, 744, 598, 206, 409, 409, 881, 324, 324, 499, 49, 49, 565, 595, 844, 662, 72, 444, 73, 727, 438, 186, 807, 628, 353, 875, 774, 33, 945, 910, 764, 2, 749, 815, 16, 204, 197, 255, 901, 925, 761, 756, 467, 961, 355, 35, 109, 428, 806, 300, 195, 314, 211, 691, 886, 984, 984, 31, 92, 246, 667, 799, 577, 400, 640, 811, 781, 100, 26, 798, 557, 756, 268, 310, 499, 279, 520, 144, 309, 402, 766, 669, 975, 931, 471, 133, 710, 672, 251, 152, 394, 70, 585, 195, 987, 873, 298, 281, 823, 659, 437, 910, 14, 425, 24, 29, 168, 420, 99, 455, 667, 516, 24, 710, 135, 701, 707, 135, 331, 962, 31, 904, 556, 785, 724, 778, 301, 73, 149, 446, 224, 804, 543, 534, 102, 834, 219, 464, 291, 224, 4, 984, 348, 407, 923, 130, 415, 507, 108, 215, 142, 255, 499, 753, 162, 944, 747, 946, 538, 624, 489, 711, 521, 247, 217, 734, 719, 129, 851, 700, 565, 629, 187, 303, 102, 51, 271, 281, 343, 624, 900, 671, 346, 516, 925, 262, 649, 86, 66, 225, 785, 47, 802, 927, 14, 16, 235, 339, 619, 407, 728, 811, 366, 752, 811, 707, 351, 870, 461, 11, 549, 682, 681, 342, 167, 864, 741, 900, 376, 996, 49, 782, 70, 877, 79, 376, 378, 345};
		p3 = 421;
		p4 = 40328;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
