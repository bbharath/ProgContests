//SRM 623 Div 1 250
//Passed System Tests
public class UniformBoard
{
	private int[] getCounts(String[] board, int startR, int startC, int W, int H) {
		int a=0, p=0, e=0;
		for(int i=startR; i<startR+H; ++i) {
			for(int j=startC; j<startC+W;++j) {
				char ch = board[i].charAt(j);
				if(ch=='A')
					++a;
				else if(ch=='P')
					++p;
				else
					++e;
			}
		}
		return new int[]{a,p,e};
	}
	public int getBoard(String[] board, int K)
	{
		int N = board.length;
		int M = board[0].length();
		
		int[] allCounts = getCounts(board, 0, 0, M, N);
		int A = allCounts[0];
		//int P = allCounts[1];
		int E = allCounts[2];
		
		int ret = 0 ;
		
		for(int W=1;W<=M;++W) {
			for(int H=1;H<=N;++H) {
				for(int i=0;i<N;++i) {
					for(int j=0;j<M;++j) {
						//at (i,j) place a rectangle of size (W,H)
						if(i+H<=N && j+W<=M) {
							int[] counts = getCounts(board, i, j, W, H);
							int a = counts[0];
							int p = counts[1];
							int e = counts[2];
							
							if(p==0 && e==0) {
								int area = W*H;
								ret = Math.max(ret, area);
								continue;
							}
							
							int ca = A-a;
							//int cp = P-p;
							int ce = E-e;
							
							int moves = 0;
							//fill all empty places with apples
							if (ca>=e) {
								ca-=e;
								moves+=e;
								ce+=e;
								
								if(ce>=1) {
									if(ca>=p) {
										moves+=(2*p);										
										if(moves<=K) {
											int area = W*H;
											ret = Math.max(ret, area);
										} else {
											continue; // moves>K, insufficient
										}
									} else {
										continue; // no: apples left is less to fill all p
									}
								} else {
									continue; // no white space to move one P.
								}
								
							} else{ 
								continue; // not enough apples to fill empty spaces
							}
						}						
					}					
				}
			}
		}		
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		UniformBoard obj;
		int answer;
		obj = new UniformBoard();
		long startTime = System.currentTimeMillis();
		answer = obj.getBoard(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new String[]{"AP",".A"};
		p1 = 0;
		p2 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"AP",".A"};
		p1 = 1;
		p2 = 2;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"PPP","APA","A.P"};
		p1 = 2;
		p2 = 3;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"AAA","PPP","AAA"};
		p1 = 10;
		p2 = 3;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"."};
		p1 = 1000;
		p2 = 0;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new String[]{"PPAAPA..AP","PPA.APAP..","..P.AA.PPP","P.P..APAA.","P.P..P.APA","PPA..AP.AA","APP..AAPAA","P.P.AP...P",".P.A.PAPPA","..PAPAP..P"};
		p1 = 10;
		p2 = 15;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
