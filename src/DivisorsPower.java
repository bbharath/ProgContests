import java.math.BigInteger;

//SRM 628 Div 1 250
//Passed System Tests
public class DivisorsPower
{
	public long getSquareRoot(long inp) {
		long ret = -1L;
		BigInteger src = new BigInteger(Long.toString(inp));
		BigInteger up = new BigInteger(Long.toString(inp));
		BigInteger low = BigInteger.ZERO;
		BigInteger two = new BigInteger("2");
		for(int iter=1;iter<=100;++iter) {
			BigInteger val = up.add(low).divide(two);
			BigInteger valSq = val.multiply(val);
			if (valSq.equals(src)) {
				ret = val.longValue();
			}
			if (valSq.compareTo(src) > 0) {
				up = val;				
			} else {
				low = val;
			}			
		}
		return ret;
	}
	public long getCubeRoot(long inp) {
		long ret = -1L;
		BigInteger src = new BigInteger(Long.toString(inp));
		BigInteger up = new BigInteger(Long.toString(inp));
		BigInteger low = BigInteger.ZERO;
		BigInteger two = new BigInteger("2");
		for(int iter=1;iter<=100;++iter) {
			BigInteger val = up.add(low).divide(two);
			BigInteger valCube = val.multiply(val).multiply(val);
			if (valCube.equals(src)) {
				ret = val.longValue();
			}
			if (valCube.compareTo(src) > 0) {
				up = val;				
			} else {
				low = val;
			}			
		}
		return ret;
	}
	public boolean isPrime(long inp) {
		boolean isPrime = true;
		for(long i=2L; (i*i)<=inp;++i) {
			if(inp%i == 0) {
				isPrime = false;
				break;
			}
		}
		return isPrime;
	}
	public long findArgument(long n)
	{
		int MAX = 100000;
		BigInteger src = new BigInteger(Long.toString(n));
		BigInteger[] first = new BigInteger[MAX+1];
		first[0] = BigInteger.ZERO;
		first[1] = BigInteger.ONE;
		int maxDiv = 0;
		for(int i=2;i<=MAX;++i) {
			int div = 0 ;
			for(int j=1;j*j<=i;++j) {
				if(i%j==0)
				{
					int q = i/j;
					if (j==q)
						++div;
					else
						div+=2;
				}
			}
			maxDiv = Math.max(maxDiv, div);
			BigInteger v = new BigInteger(Integer.toString(i));
			first[i] = v.pow(div);
		}
		
		for(int i=0;i<=MAX;++i) {
			if(first[i].equals(src)) {
				return i;
			}
		}
		
		long root = getSquareRoot(n);
		if(root!=-1L && isPrime(root)) {
			return root;			
		}
		
		long cRoot = getCubeRoot(n);
		long sRoot = getSquareRoot(cRoot);
		if(cRoot!=-1L && sRoot!=-1L && isPrime(sRoot)) {
			return cRoot;			
		}
		
		return -1L;		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, long p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		DivisorsPower obj;
		long answer;
		obj = new DivisorsPower();
		long startTime = System.currentTimeMillis();
		answer = obj.findArgument(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		long p0;
		long p1;
		
		// ----- test 0 -----
		p0 = 4L;
		p1 = 2L;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 10L;
		p1 = -1L;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 64L;
		p1 = 4L;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 10000L;
		p1 = 10L;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 2498388559757689L;
		p1 = 49983883L;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		p0 = 4890838206582784L;
		p1 = 412;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		
		p0 = 9598548249896761L;
		p1 = 212521;
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		
		p0 = 27L;
		p1 = -1;
		all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
		
		p0=893623315422378256L;
		p1 = 30746;
		all_right = KawigiEdit_RunTest(8, p0, true, p1) && all_right;
		
		
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
