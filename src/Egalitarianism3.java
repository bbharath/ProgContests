import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
//SRM 630 Div 1 250
//Passed System Tests
public class Egalitarianism3
{
	public int maxCities(int n, int[] a, int[] b, int[] len)
	{
		if(n==1)
			return 1;
		int N = n+1;
		int[][] graph = new int[N][N];
		for(int i=0;i<N;++i)
			Arrays.fill(graph[i], -1);
		for(int i=0;i<a.length;++i) {
			graph[a[i]][b[i]] = len[i];
			graph[b[i]][a[i]] = len[i];
		}
		
		int[][] distances = new int[N][N];
		for(int i=0;i<N;++i) {
			Arrays.fill(distances[i],-1);
		}
		for(int i=0;i<N;++i)
			for(int j=0;j<N;++j)
				distances[i][j] = graph[i][j];
		
		for(int k=0;k<N;++k) {
			for(int i=0;i<N;++i) {
				for(int j=0;j<N;++j) {
					if(i==j || j==k || i==k)
						continue;
					if(distances[i][k]!=-1 && distances[k][j]!=-1) {
						int D = distances[i][k] + distances[k][j];
						if(distances[i][j] == -1)
							distances[i][j] = D;
						else
							distances[i][j] = Math.min(distances[i][j], D);
					}
				}
			}
		}
		
		int ret = 2;
		
		for(int i=1;i<=n;++i) {
			for(int j=1;j<=n;++j) {
				int D = distances[i][j];
				List<Integer> cliq = new ArrayList<Integer>();
				cliq.add(i);
				cliq.add(j);
				for(int k=1;k<=n;++k) {
					if(k==i || k==j)
						continue;
					boolean possi = true;
					for(int p=0;p<cliq.size();++p) {
						int P = cliq.get(p);
						if(distances[P][k]!=D) {
							possi = false;
							break;
						}
					}
					if(possi) {
						cliq.add(k);
					}
				}
				ret = Math.max(ret,cliq.size());
			}
		}	
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, int[] p2, int[] p3, boolean hasAnswer, int p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p3.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p3[i]);
		}
		System.out.print("}");
		System.out.println("]");
		Egalitarianism3 obj;
		int answer;
		obj = new Egalitarianism3();
		long startTime = System.currentTimeMillis();
		answer = obj.maxCities(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p4);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p4;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int[] p1;
		int[] p2;
		int[] p3;
		int p4;
		
		// ----- test 0 -----
		p0 = 4;
		p1 = new int[]{1,1,1};
		p2 = new int[]{2,3,4};
		p3 = new int[]{1,1,1};
		p4 = 3;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 6;
		p1 = new int[]{1,2,3,2,3};
		p2 = new int[]{2,3,4,5,6};
		p3 = new int[]{2,1,3,2,3};
		p4 = 3;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 10;
		p1 = new int[]{1,1,1,1,1,1,1,1,1};
		p2 = new int[]{2,3,4,5,6,7,8,9,10};
		p3 = new int[]{1000,1000,1000,1000,1000,1000,1000,1000,1000};
		p4 = 9;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 1;
		p1 = new int[]{};
		p2 = new int[]{};
		p3 = new int[]{};
		p4 = 1;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		p0 = 43;
		p1 = new int[]{24, 24, 24, 23, 24, 24, 23, 23, 24, 24, 24, 24, 23, 24, 23, 24, 23, 24, 23, 23, 24, 23, 24, 23, 24, 23, 24, 24, 24, 24, 24, 24, 23, 23, 24, 23, 23, 23, 24, 24, 23, 24};
		p2 = new int[]{13, 38, 30, 1, 26, 43, 20, 3, 11, 7, 15, 25, 24, 4, 22, 40, 9, 21, 34, 19, 2, 32, 27, 18, 33, 31, 14, 28, 37, 16, 12, 42, 36, 6, 29, 5, 35, 17, 8, 10, 41, 39};
		p3 = new int[]{2, 1, 1, 1, 3, 2, 1, 2, 2, 1, 3, 2, 1, 3, 3, 2, 2, 3, 2, 1, 2, 3, 1, 2, 3, 3, 1, 1, 1, 2, 3, 2, 2, 2, 2, 1, 2, 2, 3, 1, 2, 2};
		p4 = 11;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
